import { Directive, Input, Output, EventEmitter } from '@angular/core';
import { fromEvent } from 'rxjs';
import { GridListItem } from '../gridList/GridListItem';
import { Draggable } from '../utils/draggable';
import { utils } from '../utils/utils';
import * as i0 from "@angular/core";
import * as i1 from "./gridster-prototype.service";
export class GridsterItemPrototypeDirective {
    // must be set to true because of item dragAndDrop configuration
    get dragAndDrop() {
        return true;
    }
    get gridster() {
        return this.dragContextGridster;
    }
    constructor(zone, elementRef, gridsterPrototype) {
        this.zone = zone;
        this.elementRef = elementRef;
        this.gridsterPrototype = gridsterPrototype;
        this.drop = new EventEmitter();
        this.start = new EventEmitter();
        this.cancel = new EventEmitter();
        this.enter = new EventEmitter();
        this.out = new EventEmitter();
        this.config = {};
        this.x = 0;
        this.y = 0;
        this.autoSize = false;
        this.isDragging = false;
        this.subscribtions = [];
        this.item = (new GridListItem()).setFromGridsterItemPrototype(this);
    }
    ngOnInit() {
        this.wSm = this.wSm || this.w;
        this.hSm = this.hSm || this.h;
        this.wMd = this.wMd || this.w;
        this.hMd = this.hMd || this.h;
        this.wLg = this.wLg || this.w;
        this.hLg = this.hLg || this.h;
        this.wXl = this.wXl || this.w;
        this.hXl = this.hXl || this.h;
        this.zone.runOutsideAngular(() => {
            this.enableDragDrop();
        });
    }
    ngOnDestroy() {
        this.subscribtions.forEach((sub) => {
            sub.unsubscribe();
        });
    }
    onDrop(gridster) {
        if (!this.config.helper) {
            this.$element.parentNode.removeChild(this.$element);
        }
        this.drop.emit({
            item: this.item,
            gridster: gridster
        });
    }
    onCancel() {
        this.cancel.emit({ item: this.item });
    }
    onEnter(gridster) {
        this.enter.emit({
            item: this.item,
            gridster: gridster
        });
    }
    onOver(gridster) { }
    onOut(gridster) {
        this.out.emit({
            item: this.item,
            gridster: gridster
        });
    }
    getPositionToGridster(gridster) {
        const relativeContainerCoords = this.getContainerCoordsToGridster(gridster);
        return {
            y: this.positionY - relativeContainerCoords.top,
            x: this.positionX - relativeContainerCoords.left
        };
    }
    setDragContextGridster(gridster) {
        this.dragContextGridster = gridster;
    }
    getContainerCoordsToGridster(gridster) {
        return {
            left: gridster.gridsterRect.left - this.parentRect.left,
            top: gridster.gridsterRect.top - this.parentRect.top
        };
    }
    enableDragDrop() {
        let cursorToElementPosition;
        const draggable = new Draggable(this.elementRef.nativeElement);
        const dragStartSub = draggable.dragStart
            .subscribe((event) => {
            this.zone.run(() => {
                this.$element = this.provideDragElement();
                this.containerRectange = this.$element.parentElement.getBoundingClientRect();
                this.updateParentElementData();
                this.onStart(event);
                cursorToElementPosition = event.getRelativeCoordinates(this.$element);
            });
        });
        const dragSub = draggable.dragMove
            .subscribe((event) => {
            this.setElementPosition(this.$element, {
                x: event.clientX - cursorToElementPosition.x - this.parentRect.left,
                y: event.clientY - cursorToElementPosition.y - this.parentRect.top
            });
            this.onDrag(event);
        });
        const dragStopSub = draggable.dragStop
            .subscribe((event) => {
            this.zone.run(() => {
                this.onStop(event);
                this.$element = null;
            });
        });
        const scrollSub = fromEvent(document, 'scroll')
            .subscribe(() => {
            if (this.$element) {
                this.updateParentElementData();
            }
        });
        this.subscribtions = this.subscribtions.concat([dragStartSub, dragSub, dragStopSub, scrollSub]);
    }
    setElementPosition(element, position) {
        this.positionX = position.x;
        this.positionY = position.y;
        utils.setCssElementPosition(element, position);
    }
    updateParentElementData() {
        this.parentRect = this.$element.parentElement.getBoundingClientRect();
        this.parentOffset = {
            left: this.$element.parentElement.offsetLeft,
            top: this.$element.parentElement.offsetTop
        };
    }
    onStart(event) {
        this.isDragging = true;
        this.$element.style.pointerEvents = 'none';
        this.$element.style.position = 'absolute';
        this.gridsterPrototype.dragItemStart(this, event);
        this.start.emit({ item: this.item });
    }
    onDrag(event) {
        this.gridsterPrototype.updatePrototypePosition(this, event);
    }
    onStop(event) {
        this.gridsterPrototype.dragItemStop(this, event);
        this.isDragging = false;
        this.$element.style.pointerEvents = 'auto';
        this.$element.style.position = '';
        utils.resetCSSElementPosition(this.$element);
        if (this.config.helper) {
            this.$element.parentNode.removeChild(this.$element);
        }
    }
    provideDragElement() {
        let dragElement = this.elementRef.nativeElement;
        if (this.config.helper) {
            dragElement = (dragElement).cloneNode(true);
            document.body.appendChild(this.fixStylesForBodyHelper(dragElement));
        }
        else {
            this.fixStylesForRelativeElement(dragElement);
        }
        return dragElement;
    }
    fixStylesForRelativeElement(el) {
        if (window.getComputedStyle(el).position === 'absolute') {
            return el;
        }
        const rect = this.elementRef.nativeElement.getBoundingClientRect();
        this.containerRectange = el.parentElement.getBoundingClientRect();
        el.style.position = 'absolute';
        this.setElementPosition(el, {
            x: rect.left - this.containerRectange.left,
            y: rect.top - this.containerRectange.top
        });
        return el;
    }
    /**
     * When element is cloned and append to body it should have position absolute and coords set by original
     * relative prototype element position.
     */
    fixStylesForBodyHelper(el) {
        const bodyRect = document.body.getBoundingClientRect();
        const rect = this.elementRef.nativeElement.getBoundingClientRect();
        el.style.position = 'absolute';
        this.setElementPosition(el, {
            x: rect.left - bodyRect.left,
            y: rect.top - bodyRect.top
        });
        return el;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.0.7", ngImport: i0, type: GridsterItemPrototypeDirective, deps: [{ token: i0.NgZone }, { token: i0.ElementRef }, { token: i1.GridsterPrototypeService }], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "17.0.7", type: GridsterItemPrototypeDirective, selector: "[ngxGridsterItemPrototype]", inputs: { data: "data", config: "config", w: "w", wSm: "wSm", wMd: "wMd", wLg: "wLg", wXl: "wXl", h: "h", hSm: "hSm", hMd: "hMd", hLg: "hLg", hXl: "hXl" }, outputs: { drop: "drop", start: "start", cancel: "cancel", enter: "enter", out: "out" }, ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.0.7", ngImport: i0, type: GridsterItemPrototypeDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[ngxGridsterItemPrototype]'
                }]
        }], ctorParameters: () => [{ type: i0.NgZone }, { type: i0.ElementRef }, { type: i1.GridsterPrototypeService }], propDecorators: { drop: [{
                type: Output
            }], start: [{
                type: Output
            }], cancel: [{
                type: Output
            }], enter: [{
                type: Output
            }], out: [{
                type: Output
            }], data: [{
                type: Input
            }], config: [{
                type: Input
            }], w: [{
                type: Input
            }], wSm: [{
                type: Input
            }], wMd: [{
                type: Input
            }], wLg: [{
                type: Input
            }], wXl: [{
                type: Input
            }], h: [{
                type: Input
            }], hSm: [{
                type: Input
            }], hMd: [{
                type: Input
            }], hLg: [{
                type: Input
            }], hXl: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,